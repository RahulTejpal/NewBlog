{"ast":null,"code":"import * as ActionTypes from '../ContextActions';\nexport default ((state, action) => {\n  switch (action.type) {\n    case ActionTypes.NEW_BLOG_SUCCESS:\n      let blogs = state.blogs ? state.blogs : []; //checks if the state.blogs array exists, and if not, sets it to an empty array.\n      return {\n        ...state,\n        blogs: [...blogs, action.payload]\n      };\n    case ActionTypes.GET_BLOGS_SUCCESS:\n      return {\n        ...state,\n        blogs: action.payload\n      };\n    case ActionTypes.BLOG_FAIL:\n      return {\n        ...state,\n        blogs: action.payload\n      };\n    case ActionTypes.UPDATE_BLOG:\n      return {\n        ...state,\n        currentBlog: action.payload,\n        blogs: state.blogs.map(blog => blog._id === action.payload._id ? action.payload : blog) // we're going to iterate thru our state blogs,we're gonna look for the blog thru blog._id i.e we're going to compare what we have(blog._id) vs the payload that we return, if the ids match then we update that with the new payload otherwise we'll return the blog\n      };\n\n    case ActionTypes.BLOG_DELETE:\n      return {\n        ...state,\n        blogs: state.blogs.filter(blog => blog._id !== action.payload.blogId),\n        toasts: action.payload.toasts\n      };\n    case ActionTypes.GET_BLOG_BY_ID:\n      return {\n        ...state,\n        currentBlog: action.payload\n      };\n    case ActionTypes.CLEAR_ERRORS:\n      return {\n        ...state,\n        toasts: null\n      };\n    case ActionTypes.CLEAR_BLOGS:\n      return {\n        ...state,\n        blogs: null\n      };\n    default:\n      return state;\n  }\n});","map":{"version":3,"names":["ActionTypes","state","action","type","NEW_BLOG_SUCCESS","blogs","payload","GET_BLOGS_SUCCESS","BLOG_FAIL","UPDATE_BLOG","currentBlog","map","blog","_id","BLOG_DELETE","filter","blogId","toasts","GET_BLOG_BY_ID","CLEAR_ERRORS","CLEAR_BLOGS"],"sources":["/home/rahul/Desktop/NewBlog/client/src/context/blog_context/blogReducer.js"],"sourcesContent":["import * as ActionTypes from '../ContextActions'\n\nexport default (state,action) => {\n    switch (action.type){\n        case ActionTypes.NEW_BLOG_SUCCESS:\n            let blogs = state.blogs ? state.blogs :[]; //checks if the state.blogs array exists, and if not, sets it to an empty array.\n            return{\n                ...state,\n                blogs: [...blogs,action.payload]\n            }\n        case ActionTypes.GET_BLOGS_SUCCESS:\n                return{\n                    ...state,\n                    blogs: action.payload\n                }\n        case ActionTypes.BLOG_FAIL:\n                return{\n                        ...state,\n                        blogs: action.payload\n                    }\n        case ActionTypes.UPDATE_BLOG:\n                return{\n                            ...state,\n                            currentBlog: action.payload,\n                            blogs: state.blogs.map(blog => blog._id === action.payload._id ? action.payload: blog)// we're going to iterate thru our state blogs,we're gonna look for the blog thru blog._id i.e we're going to compare what we have(blog._id) vs the payload that we return, if the ids match then we update that with the new payload otherwise we'll return the blog\n                        }   \n                        \n        case ActionTypes.BLOG_DELETE:\n            return{\n                ...state,\n                blogs: state.blogs.filter(blog=> blog._id !== action.payload.blogId),\n                toasts: action.payload.toasts\n                \n            } \n            \n        case ActionTypes.GET_BLOG_BY_ID:\n            return{\n                ...state,\n                currentBlog: action.payload,\n\n            }    \n\n        case ActionTypes.CLEAR_ERRORS:\n            return{\n                ...state,\n                toasts: null\n            }   \n            \n        case ActionTypes.CLEAR_BLOGS:\n                return{\n                    ...state,\n                    blogs: null\n                }    \n                         \n                        \n        default :\n            return state;                \n\n\n    }\n}"],"mappings":"AAAA,OAAO,KAAKA,WAAW,MAAM,mBAAmB;AAEhD,gBAAe,CAACC,KAAK,EAACC,MAAM,KAAK;EAC7B,QAAQA,MAAM,CAACC,IAAI;IACf,KAAKH,WAAW,CAACI,gBAAgB;MAC7B,IAAIC,KAAK,GAAGJ,KAAK,CAACI,KAAK,GAAGJ,KAAK,CAACI,KAAK,GAAE,EAAE,CAAC,CAAC;MAC3C,OAAM;QACF,GAAGJ,KAAK;QACRI,KAAK,EAAE,CAAC,GAAGA,KAAK,EAACH,MAAM,CAACI,OAAO;MACnC,CAAC;IACL,KAAKN,WAAW,CAACO,iBAAiB;MAC1B,OAAM;QACF,GAAGN,KAAK;QACRI,KAAK,EAAEH,MAAM,CAACI;MAClB,CAAC;IACT,KAAKN,WAAW,CAACQ,SAAS;MAClB,OAAM;QACE,GAAGP,KAAK;QACRI,KAAK,EAAEH,MAAM,CAACI;MAClB,CAAC;IACb,KAAKN,WAAW,CAACS,WAAW;MACpB,OAAM;QACM,GAAGR,KAAK;QACRS,WAAW,EAAER,MAAM,CAACI,OAAO;QAC3BD,KAAK,EAAEJ,KAAK,CAACI,KAAK,CAACM,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,GAAG,KAAKX,MAAM,CAACI,OAAO,CAACO,GAAG,GAAGX,MAAM,CAACI,OAAO,GAAEM,IAAI,CAAC;MAC1F,CAAC;;IAEjB,KAAKZ,WAAW,CAACc,WAAW;MACxB,OAAM;QACF,GAAGb,KAAK;QACRI,KAAK,EAAEJ,KAAK,CAACI,KAAK,CAACU,MAAM,CAACH,IAAI,IAAGA,IAAI,CAACC,GAAG,KAAKX,MAAM,CAACI,OAAO,CAACU,MAAM,CAAC;QACpEC,MAAM,EAAEf,MAAM,CAACI,OAAO,CAACW;MAE3B,CAAC;IAEL,KAAKjB,WAAW,CAACkB,cAAc;MAC3B,OAAM;QACF,GAAGjB,KAAK;QACRS,WAAW,EAAER,MAAM,CAACI;MAExB,CAAC;IAEL,KAAKN,WAAW,CAACmB,YAAY;MACzB,OAAM;QACF,GAAGlB,KAAK;QACRgB,MAAM,EAAE;MACZ,CAAC;IAEL,KAAKjB,WAAW,CAACoB,WAAW;MACpB,OAAM;QACF,GAAGnB,KAAK;QACRI,KAAK,EAAE;MACX,CAAC;IAGT;MACI,OAAOJ,KAAK;EAAC;AAIzB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}