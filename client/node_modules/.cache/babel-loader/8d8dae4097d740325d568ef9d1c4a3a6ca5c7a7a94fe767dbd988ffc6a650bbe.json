{"ast":null,"code":"var _jsxFileName = \"/home/rahul/Desktop/NewBlog/client/src/context/blog_context/BlogState.js\",\n  _s = $RefreshSig$();\nimport { createContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport blogReducer from \"./blogReducer\";\nimport * as ActionTypes from '../ContextActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const BlogContext = /*#__PURE__*/createContext();\nexport default function BlogState(props) {\n  _s();\n  const initialState = {\n    blogs: null,\n    currentBlog: null,\n    toasts: null,\n    blogCreated: false\n  };\n  const [state, dispatch] = useReducer(blogReducer, initialState);\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      'x-auth-token': localStorage.getItem('token')\n    }\n  };\n  const getBlogs = async () => {\n    //get all blogs\n    try {\n      const res = await axios.get('/api/blogs', config);\n      dispatch({\n        type: ActionTypes.GET_BLOGS_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(err.response.data);\n      dispatch({\n        type: ActionTypes.BLOG_FAIL,\n        payload: err.response.data\n      });\n    }\n  };\n  const getBlogById = async blogId => {\n    //get a particular blog\n    try {\n      const res = await axios.get(`/api/blogs/${blogId}`, config);\n      dispatch({\n        type: ActionTypes.GET_BLOG_BY_ID,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(err.response.data);\n      dispatch({\n        type: ActionTypes.BLOG_FAIL,\n        payload: err.response.data\n      });\n    }\n  };\n  const createBlog = async blogData => {\n    try {\n      const res = await axios.post('/api/blogs', blogData, config);\n      dispatch({\n        type: ActionTypes.NEW_BLOG_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(err.response.data);\n      dispatch({\n        type: ActionTypes.BLOG_FAIL,\n        payload: err.response.data\n      });\n    }\n  };\n  const updateBlog = async blogData => {\n    try {\n      const res = await axios.put(`/api/blogs/${blogData._id}`, blogData, config); //gonna get blog id from blogData, config we have token used to authenticate\n      dispatch({\n        type: ActionTypes.UPDATE_BLOG,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(err.response.data);\n      dispatch({\n        type: ActionTypes.BLOG_FAIL,\n        payload: err.response.data\n      });\n    }\n  };\n  const deleteBlog = async blogId => {\n    try {\n      const res = await axios.delete(`/api/blogs/${blogId}`, config);\n      dispatch({\n        type: ActionTypes.BLOG_DELETE,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(err.response.data);\n      dispatch({\n        type: ActionTypes.BLOG_FAIL,\n        payload: err.response.data\n      });\n    }\n  };\n  const clearErrors = async () => {};\n  const clearBlogs = async () => {\n    dispatch({\n      type: ActionTypes.CLEAR_BLOGS\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(BlogContext.Provider, {\n    value: {\n      blogs: state.blogs,\n      currentBlog: state.currentBlog,\n      toasts: state.toasts,\n      blogCreated: state.blogCreated,\n      clearCurrent,\n      getBlogs,\n      getBlogById,\n      createBlog,\n      updateBlog,\n      deleteBlog,\n      clearErrors,\n      clearBlogs //run this one whenever we'll logout\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n_s(BlogState, \"UrEkDPQH5U12xnblC9PjDJeyoVE=\");\n_c = BlogState;\nvar _c;\n$RefreshReg$(_c, \"BlogState\");","map":{"version":3,"names":["createContext","useReducer","axios","blogReducer","ActionTypes","jsxDEV","_jsxDEV","BlogContext","BlogState","props","_s","initialState","blogs","currentBlog","toasts","blogCreated","state","dispatch","config","headers","localStorage","getItem","getBlogs","res","get","type","GET_BLOGS_SUCCESS","payload","data","err","console","log","response","BLOG_FAIL","getBlogById","blogId","GET_BLOG_BY_ID","createBlog","blogData","post","NEW_BLOG_SUCCESS","updateBlog","put","_id","UPDATE_BLOG","deleteBlog","delete","BLOG_DELETE","clearErrors","clearBlogs","CLEAR_BLOGS","Provider","value","clearCurrent","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/rahul/Desktop/NewBlog/client/src/context/blog_context/BlogState.js"],"sourcesContent":["import { createContext, useReducer } from \"react\";\nimport axios from \"axios\";\nimport blogReducer from \"./blogReducer\";\nimport * as ActionTypes from '../ContextActions';\n\nexport const BlogContext = createContext();\n\nexport default function BlogState(props){\n    const initialState = {\n        blogs: null,\n        currentBlog: null,\n        toasts: null,\n        blogCreated: false\n    }\n\n    const [state,dispatch] = useReducer(blogReducer,initialState);\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json',\n            'x-auth-token': localStorage.getItem('token'),\n        }\n    }\n\n    const getBlogs = async () => { //get all blogs\n        try{\n            const res = await axios.get('/api/blogs',config);\n            dispatch({\n                type: ActionTypes.GET_BLOGS_SUCCESS,\n                payload: res.data\n            })\n        }\n        catch(err){\n            console.log(err.response.data);\n            dispatch({\n                type: ActionTypes.BLOG_FAIL,\n                payload: err.response.data,\n            })\n\n        }\n    }\n\n    const getBlogById = async (blogId) => { //get a particular blog\n        try{\n            const res = await axios.get(`/api/blogs/${blogId}`,config);\n            dispatch({\n                type: ActionTypes.GET_BLOG_BY_ID,\n                payload: res.data\n            })\n        } catch(err){\n            console.log(err.response.data);\n            dispatch({\n                type: ActionTypes.BLOG_FAIL,\n                payload: err.response.data,\n            })\n        }\n    }\n\n    const createBlog = async (blogData) => {\n        try{\n            const res = await axios.post('/api/blogs',blogData,config);\n            dispatch({\n                type: ActionTypes.NEW_BLOG_SUCCESS,\n                payload: res.data\n            })\n        }\n        catch(err){\n            console.log(err.response.data);\n            dispatch({\n                type: ActionTypes.BLOG_FAIL,\n                payload: err.response.data,\n            })\n        }\n    }\n\n    const updateBlog = async (blogData) => {\n        try{\n            const res = await axios.put(`/api/blogs/${blogData._id}`,blogData,config);//gonna get blog id from blogData, config we have token used to authenticate\n            dispatch({\n                type: ActionTypes.UPDATE_BLOG,\n                payload: res.data\n            })\n        }\n        catch(err){\n            console.log(err.response.data);\n            dispatch({\n                type: ActionTypes.BLOG_FAIL,\n                payload: err.response.data,\n            })\n        }\n    }\n\n    const deleteBlog = async (blogId) => {\n        try{\n            const res = await axios.delete(`/api/blogs/${blogId}`,config);\n            dispatch({\n                type: ActionTypes.BLOG_DELETE,\n                payload: res.data\n            })\n        }\n        catch(err){\n            console.log(err.response.data);\n            dispatch({\n                type: ActionTypes.BLOG_FAIL,\n                payload: err.response.data,\n            })\n        }\n    }\n\n    const clearErrors = async () => {}\n\n    const clearBlogs = async () => {\n        dispatch({\n            type: ActionTypes.CLEAR_BLOGS\n        })\n    }\n\n\n\n    return(\n        <BlogContext.Provider value={{\n            blogs: state.blogs,\n            currentBlog: state.currentBlog,\n            toasts: state.toasts,\n            blogCreated: state.blogCreated,\n\n            clearCurrent,\n            getBlogs,\n            getBlogById,\n            createBlog,\n            updateBlog,\n            deleteBlog,\n            clearErrors,\n            clearBlogs, //run this one whenever we'll logout\n        }}>\n            {props.children}\n        </BlogContext.Provider>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}